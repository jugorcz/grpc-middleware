// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `bankcommunication.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package BankCommunication;

public class LoanCost implements java.lang.Cloneable,
                                 java.io.Serializable
{
    public Decimal localCurrencyCost;

    public Decimal orderedCurrencyCost;

    public LoanCost()
    {
        this.localCurrencyCost = new Decimal();
        this.orderedCurrencyCost = new Decimal();
    }

    public LoanCost(Decimal localCurrencyCost, Decimal orderedCurrencyCost)
    {
        this.localCurrencyCost = localCurrencyCost;
        this.orderedCurrencyCost = orderedCurrencyCost;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        LoanCost r = null;
        if(rhs instanceof LoanCost)
        {
            r = (LoanCost)rhs;
        }

        if(r != null)
        {
            if(this.localCurrencyCost != r.localCurrencyCost)
            {
                if(this.localCurrencyCost == null || r.localCurrencyCost == null || !this.localCurrencyCost.equals(r.localCurrencyCost))
                {
                    return false;
                }
            }
            if(this.orderedCurrencyCost != r.orderedCurrencyCost)
            {
                if(this.orderedCurrencyCost == null || r.orderedCurrencyCost == null || !this.orderedCurrencyCost.equals(r.orderedCurrencyCost))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::BankCommunication::LoanCost");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, localCurrencyCost);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, orderedCurrencyCost);
        return h_;
    }

    public LoanCost clone()
    {
        LoanCost c = null;
        try
        {
            c = (LoanCost)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        Decimal.ice_write(ostr, this.localCurrencyCost);
        Decimal.ice_write(ostr, this.orderedCurrencyCost);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.localCurrencyCost = Decimal.ice_read(istr);
        this.orderedCurrencyCost = Decimal.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, LoanCost v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public LoanCost ice_read(com.zeroc.Ice.InputStream istr)
    {
        LoanCost v = new LoanCost();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<LoanCost> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, LoanCost v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            ostr.writeSize(20);
            ice_write(ostr, v);
        }
    }

    static public java.util.Optional<LoanCost> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.VSize))
        {
            istr.skipSize();
            return java.util.Optional.of(LoanCost.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final LoanCost _nullMarshalValue = new LoanCost();

    public static final long serialVersionUID = 2830419501737511400L;
}
